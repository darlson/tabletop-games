{"version":3,"sources":["Components/Header.js","Components/AddGame.js","Components/Button.js","Components/Game.js","Components/Games.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","AddGame","props","state","name","players","description","image","e","target","value","this","setState","placeholder","onChange","handleChange","onClick","addGame","Component","Button","onClickFn","title","Game","isEditing","newName","newPlayers","newDescription","newImage","toggleEdit","bind","data","saveInfo","id","src","alt","deleteGame","Games","gamesMap","games","map","key","style","display","justifyContent","flexWrap","App","axios","get","then","res","console","log","body","post","put","delete","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d65e4136.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Header () {\r\n    return (\r\n        <div className=\"App-header\">\r\n            <h1>My Favorite Games</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React, {Component} from 'react'\r\n\r\n\r\nclass AddGame extends Component {\r\n    constructor (props) {\r\n        super(props)\r\n        this.state = {\r\n            name: '',\r\n            players: '',\r\n            description: '',\r\n            image: '',\r\n        }\r\n    }\r\n    handleChange(e) {\r\n        const {name, value} = e.target\r\n        this.setState({ [name]: value })\r\n    }\r\n        \r\n    // console.log(props)\r\n    render () {\r\n        // console.log(this.state)\r\n        const {name, players, description, image} = this.state\r\n        return (\r\n            <div>\r\n                <input name=\"name\" placeholder=\"Name\" onChange={e => this.handleChange(e)} />\r\n                <input name=\"players\" placeholder=\"Players\" onChange={e => this.handleChange(e)} />\r\n                <input name=\"description\" placeholder=\"Description\" onChange={e => this.handleChange(e)} />\r\n                <input name=\"image\" placeholder=\"Image\" onChange={e => this.handleChange(e)} />\r\n                <button onClick={ () => { (this.props.addGame(name, players, description, image)) }}>Add Game</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddGame","import React from 'react'\r\n\r\nfunction Button (props) {\r\n    return (\r\n        <button onClick={props.onClickFn}> {props.title} </button>\r\n    )\r\n}\r\n\r\nexport default Button","import React, {Component} from 'react'\r\nimport Button from './Button'\r\n\r\n\r\nclass Game extends Component {\r\n    constructor (props) {\r\n        super(props)\r\n        this.state = {\r\n            isEditing: false,\r\n            newName: '',\r\n            newPlayers: '',\r\n            newDescription: '',\r\n            newImage: '',\r\n        }\r\n        this.toggleEdit = this.toggleEdit.bind(this)\r\n    }\r\n\r\n    toggleEdit() {\r\n        this.setState ({ isEditing: !this.state.isEditing })\r\n    }\r\n    handleChange(e) {\r\n        const {name, value} = e.target\r\n        this.setState({ [name]: value })\r\n    }\r\n    handleSaveName() {\r\n        const {data} = this.props\r\n        this.props.saveInfo(data.id, this.state.name)\r\n      }\r\n\r\n    render(){\r\n        // console.log(this.state)\r\n        const {newName, newPlayers, newDescription, newImage} = this.state\r\n        return (\r\n            <div className=\"game-card\">\r\n                <img src={this.props.data.image} alt={this.props.data.name} />\r\n                <h4>{this.props.data.name}</h4>\r\n                <p>{this.props.data.players} players</p>\r\n                \r\n                <p className=\"desc-box\">{this.props.data.description}</p>\r\n                <div>\r\n                    {!this.state.isEditing ? (\r\n                        <button onClick={ () => this.toggleEdit() } >Edit</button>\r\n                    ) : (\r\n                        <div>\r\n                            <input name=\"newName\" placeholder=\"Name\" onChange={e => this.handleChange(e)} />\r\n                            <input name=\"newPlayers\" placeholder=\"Players\" onChange={e => this.handleChange(e)} />\r\n                            <input name=\"newDescription\" placeholder=\"Description\" onChange={e => this.handleChange(e)} />\r\n                            <input name=\"newImage\" placeholder=\"Image\" onChange={e => this.handleChange(e)} />\r\n                            <br/>\r\n                            <Button title='Cancel' onClickFn={ () => this.toggleEdit()} />\r\n                            <Button title='Save' onClickFn={ () => {\r\n                                this.props.saveInfo(this.props.data.id, newName, newPlayers, newDescription, newImage)\r\n                                this.toggleEdit() } } />\r\n                        </div>\r\n                    )}\r\n                    <Button title='Delete' onClickFn={ () => this.props.deleteGame(this.props.data.id)}/>  \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game","import React from 'react'\r\nimport Game from './Game'\r\n\r\nfunction Games (props) {\r\n    // console.log(props)\r\n    const gamesMap = props.games.map( games => (\r\n        <Game \r\n            key={games.id}\r\n            saveInfo={props.saveInfo}\r\n            deleteGame={props.deleteGame}\r\n            data={games}\r\n        />\r\n    ))\r\n    \r\n    return (\r\n        <div>\r\n            <h3>Board game or card game? We have 'em all</h3>\r\n            <div style={{ display: 'flex', justifyContent: 'center', flexWrap: 'wrap' }}>\r\n                {gamesMap}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Games","import React, {Component} from 'react';\nimport './App.css';\nimport Header from './Components/Header'\nimport AddGame from './Components/AddGame'\nimport Games from './Components/Games'\nimport axios from 'axios'\n\nclass App extends Component {\n  constructor (){\n    super()\n    this.state = {\n      games: [],\n    }\n\n    // this.componentDidMount = this.componentDidMount.bind(this)\n    this.addGame = this.addGame.bind(this)\n    this.saveInfo = this.saveInfo.bind(this)\n    this.deleteGame = this.deleteGame.bind(this)\n  }\n  componentDidMount() {\n    axios.get('/api/games').then(res => {\n      this.setState({ games: res.data })\n    })\n  }\n  addGame(name, players, description, image) {\n    console.log(\"game added\")\n    const body = {name, players, description, image}\n    axios.post('/api/games', body).then(res => {\n      this.setState({ games: res.data })\n    })\n  }\n  saveInfo(id, newName, newPlayers, newDescription, newImage) {\n    console.log(\"game edited\", newName, newPlayers, newDescription, newImage)\n    const body = {newName, newPlayers, newDescription, newImage}\n    axios.put(`/api/games/${id}`, body).then(res => {\n      this.setState({ games: res.data })\n      \n      // console.log(res.data)\n    })\n  }\n  deleteGame(id) {\n    // console.log(\"game deleted\", id)\n    axios.delete(`/api/games/${id}`).then(res => {\n      this.setState({ games: res.data })\n    })\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <AddGame \n          addGame={this.addGame}\n          // handleChange={this.handleChange}\n           \n        />\n        <Games \n          games={this.state.games}\n          saveInfo={this.saveInfo}\n          deleteGame={this.deleteGame}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}